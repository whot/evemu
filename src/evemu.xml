<header>
 <copyright>
/*****************************************************************************
 * evemu - Kernel device emulation
 *
 * Copyright (C) 2010-2012 Canonical Ltd.
 *
 * This library is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 3
 * as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranties of
 * MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see &lt;http://www.gnu.org/licenses/&gt;
 *
 * Copyright (C) 2010 Henrik Rydberg &lt;rydberg@euromail.se&gt;
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************/
  </copyright>
  <version version="0x00010000" />
  <function>
    <doc>
     evemu_new() - allocate a new evemu device
     @name: wanted input device name (or NULL to leave empty)

     This function allocates a new evemu device structure and
     initializes all fields to zero. If name is non-null and the length
     is sane, it is copied to the device name.

     Returns NULL in case of memory failure.
    </doc>
    <retval>struct evemu_device *</retval>
    <name>evemu_new</name>
    <args>
      <arg type="const char *" name="name" />
    </args>
  </function>
 <function>
   <doc>
     evemu_delete() - free and allocated evemu device
     @dev: the device to free

     The device pointer is invalidated by this call.
    </doc>
    <retval>void</retval>
    <name>evemu_delete</name>
    <args>
      <arg type="struct evemu_device *" name="dev" />
    </args>
 </function>
 <function>
   <doc>
      evemu_get_version() - get library version
      @dev: the device in use
      *
      Returns the library version used to create this evemu instance. The
      version may differ from the value of EVEMU_VERSION in this header
      file.
   </doc>
   <retval>unsigned int</retval>
   <name>evemu_get_version</name>
   <args>
     <arg type="const struct evemu_device *" name="dev"/>
   </args>
 </function>
 <function>
   <doc>
      evemu_get_name() - get device name
      @dev: the device in use

      Returns the name of the device. The pointer is owned by the evemu
      instance and has evemu scope.
   </doc>
   <retval>const char *</retval>
   <name>evemu_get_name</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_set_name() - set device name
      @dev: the device in use

      Sets the name of the device. If name is non-null and the length is
      sane, it is copied to the device name.
   </doc>
   <retval>void</retval>
   <name>evemu_set_name</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="const char *" name="name" />
   </args>
 </function>

 <function>
   <doc>
      evemu_get_id_bustype() - get kernel device bustype
      @dev: the device in use

      Returns the kernel bus type used by the device.
   </doc>
   <retval>unsigned int</retval>
   <name>evemu_get_id_bustype</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_set_id_bustype() - set kernel bustype

      @dev: the device in use
      @bustype: the bustype value to set.
   </doc>
   <retval>void</retval>
   <name>evemu_set_id_bustype</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="unsigned int" name="bustype"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_id_vendor() - get kernel device vendor id
      @dev: the device in use

      Returns the kernel vendor id used by the device.
   </doc>
   <retval>unsigned int</retval>
   <name>evemu_get_id_vendor</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_set_id_vendor() - set kernel device vendor id

      @dev: the device in use
      @vendor: the vendor id value to set.
   </doc>
   <retval>void</retval>
   <name>evemu_set_id_vendor</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="unsigned int" name="vendor"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_id_product() - get kernel device product id
      @dev: the device in use

      Returns the kernel product id used by the device.
   </doc>
   <retval>unsigned int</retval>
   <name>evemu_get_id_product</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_set_id_product() - set kernel device product id

      @dev: the device in use
      @product: the product id value to set.
   </doc>
   <retval>void</retval>
   <name>evemu_set_id_product</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="unsigned int" name="product"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_id_version() - get kernel device id version
      @dev: the device in use

      Returns the kernel device id used by the device.
   </doc>
   <retval>unsigned int</retval>
   <name>evemu_get_id_version</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_set_id_version() - set kernel device id version

      @dev: the device in use
      @version: the version value to set.
   </doc>
   <retval>void</retval>
   <name>evemu_set_id_version</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="unsigned int" name="version"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_minimum() - get kernel minimum value of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the range minimum of the specified event type.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_minimum</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_set_abs_minimum() - set kernel minimum value of event type

      @dev: the device in use
      @code: the event type code to set
      @min: the minimum value to set
   </doc>
   <retval>void</retval>
   <name>evemu_set_abs_minimum</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
     <arg type="int" name="min"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_maximum() - get kernel maximum value of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the range maximum of the specified event type.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_maximum</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_current_value() - get kernel current value of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the current value of the specified event type.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_current_value</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>


 <function>
   <doc>
      evemu_set_abs_maximum() - set kernel maximum value of event type

      @dev: the device in use
      @code: the event type code to set
      @max: the maximum value to set
   </doc>
   <retval>void</retval>
   <name>evemu_set_abs_maximum</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
     <arg type="int" name="max"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_maximum() - get kernel filter fuzz of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the filter fuzz of the specified event type.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_fuzz</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_set_abs_fuzz() - set kernel filter fuzz of event type

      @dev: the device in use
      @code: the event type code to set
      @fuzz: the fuzz value to set
   </doc>
   <retval>void</retval>
   <name>evemu_set_abs_fuzz</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
     <arg type="int" name="fuzz"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_maximum() - get kernel flat value of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the flat value of the specified event type. Only used for
      joysticks.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_flat</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_set_abs_flat() - set kernel filter flat of event type

      @dev: the device in use
      @code: the event type code to set
      @flat: the flat value to set
   </doc>
   <retval>void</retval>
   <name>evemu_set_abs_flat</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
     <arg type="int" name="flat"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_get_abs_resolution() - get kernel resolution of event type
      @dev: the device in use
      @code: the event type code to query

      Returns the resolution of the specified event type. Resolution is
      specified in units per millimeter (units/mm), or units per radian
      where appropriate.
   </doc>
   <retval>int</retval>
   <name>evemu_get_abs_resolution</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_set_abs_resolution() - set kernel resolution of event type
      @dev: the device in use
      @code: the event type code to set
      @res: the resolution value to set.

      Resolution is specified in units per millimeter (units/mm), or units per
      radian where appropriate.
   </doc>
   <retval>void</retval>
   <name>evemu_set_abs_resolution</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
     <arg type="int" name="res"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_has_prop() - check if device has a certain property
      @dev: the device in use
      @code: the property type code to query

      Returns true if the device has the given property.
   </doc>
   <retval>int</retval>
   <name>evemu_has_prop</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_has_event() - check if device has a certain event type
      @dev: the device in use
      @code: the event type code to query

      Returns true if the event type is supported by the device.
   </doc>
   <retval>int</retval>
   <name>evemu_has_event</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="type"/>
     <arg type="int" name="code"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_has_bit() - check if a device has a certain EV_* bit set
      @dev: the device in use
      @type: the EV_* bit to query

      Returns true if the event bit is supported by the device.
   </doc>
   <retval>int</retval>
   <name>evemu_has_bit</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="int" name="type"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_extract() - configure evemu instance directly from the kernel device
      @dev: the device in use
      @fd: file descriptor of the kernel device to query

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_extract</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="fd"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_write() - write evemu configuration to a file
      @dev: the device in use
      @fp: file pointer to write the evemu configuration to

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_write</name>
   <args>
     <arg type="const struct evemu_device *" name="dev" />
     <arg type="FILE *" name="fp"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_read() - read evemu configuration from a file
      @dev: the device in use
      @fp: file pointer to read the evemu configuration from

      Returns a positive number if successful, zero or negative error
      otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_read</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="FILE *" name="fp"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_write_event() - write kernel event to file
      @fp: file pointer to write the event to
      @ev: pointer to the kernel event to write

      Writes the kernel event to the file.

      Returns a positive number if successful, zero or negative error
      otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_write_event</name>
   <args>
     <arg type="FILE *" name="fp"/>
     <arg type="const struct input_event *" name="ev"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_create_event() - Create a single event
      @ev: pointer to the kernel event to be filled
      @type: the event type to set
      @code: the event code to set
      @value: the event value to set
   </doc>
   <retval>int</retval>
   <name>evemu_create_event</name>
   <args>
     <arg type="struct input_event *" name="ev" />
     <arg type="int" name="type"/>
     <arg type="int" name="code"/>
     <arg type="int" name="value"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_read_event() - read kernel event from file
      @fp: file pointer to read the event from
      @ev: pointer to the kernel event to be filled

      Reads a kernel event from the file.

      Returns a positive number if successful, zero or negative error
      otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_read_event</name>
   <args>
     <arg type="FILE *" name="fp"/>
     <arg type="struct input_event *" name="ev"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_read_event_realtime() - read kernel events in realtime
      @fp: file pointer to read the event from
      @ev: pointer to the kernel event to be filled
      @evtime: pointer to a timeval struct

      The evtime struct should be cleared (zeroed) before the first call
      to this function. This function reads a kernel event from the file,
      and performs the microsleep necessary to deliver the event with the
      same timings as originally received.

      Returns a positive number if successful, zero or negative error
      otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_read_event_realtime</name>
   <args>
     <arg type="FILE *" name="fp"/>
     <arg type="struct input_event *" name="ev"/>
     <arg type="struct timeval *" name="evtime"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_record() - read events directly from a kernel device
      @fp: file pointer to write the events to
      @fd: file descriptor of kernel device to read from
      @ms: maximum time to wait for an event to appear before reading (ms)

      Continuously reads events from the kernel device and writes them to
      the file. The function terminates after ms milliseconds of
      inactivity.

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_record</name>
   <args>
     <arg type="FILE *" name="fp"/>
     <arg type="int" name="fd"/>
     <arg type="int" name="ms"/>
   </args>
 </function>


 <function>
   <doc>
      evemu_play_one() - play one event to kernel device
      @fd: file descriptor of kernel device to write to
      @ev: pointer to the kernel event to be played

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_play_one</name>
   <args>
     <arg type="int" name="fd"/>
     <arg type="const struct input_event *" name="ev"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_play() - replay events from file to kernel device in realtime
      @fp: file pointer to read the events from
      @fd: file descriptor of kernel device to write to

      Contiuously reads events from the file and writes them to the
      kernel device, in realtime. The function terminates when end of
      file has been reached.

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_play</name>
   <args>
     <arg type="FILE *" name="fp"/>
     <arg type="int" name="fd"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_create() - create a kernel device from the evemu configuration
      @dev: the device in use
      @fd: file descriptor of the special kernel uinput device

      Creates a new device with all the properties of the evemu device.

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_create</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
     <arg type="int" name="fd"/>
   </args>
 </function>

 <function>
   <doc>
      evemu_create_managed() - create a kernel device from the evemu configuration
      @dev: the device in use

      Creates a new device with all the properties of the evemu device.
      Compared to evemu_create, evemu will take care of the handling of the uinput
      file descriptor.

      Returns zero if successful, negative error otherwise.
   </doc>
   <retval>int</retval>
   <name>evemu_create_managed</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_get_devnode() - get device node
      @dev: the device in use

      Returns the input device node of the virtual device. The pointer is owned by
      the evemu instance and has evemu scope.
   </doc>
   <retval>const char *</retval>
   <name>evemu_get_devnode</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
   </args>
 </function>

 <function>
   <doc>
      evemu_destroy() - destroy all created kernel devices
      @dev: the device to destroy

      Destroys all devices created using this file descriptor.
   </doc>
   <retval>void</retval>
   <name>evemu_destroy</name>
   <args>
     <arg type="struct evemu_device *" name="dev" />
   </args>
 </function>

</header>
